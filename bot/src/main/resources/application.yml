app:
  telegram-token: ${MY_TOKEN}
  baseScrapperClientUrl: http://localhost:8080
  kafka-topic-name: updates

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  liquibase:
    enabled: false
  datasource:
    #url: jdbc:postgresql://postgresql:5437/scrapper
    url: jdbc:postgresql://localhost:5437/scrapper
    username: ${USERNAME}
    password: ${PASSWORD}
    driverClassName: org.postgresql.Driver
  cache:
    cache-names:
      - rate-limit-buckets-bot
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  kafka:
    consumer:
      bootstrap-servers: localhost:29092
      group-id: bot
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: dto.request.LinkUpdate
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
      bootstrap-servers: localhost:29092
    bootstrap-servers: localhost:29092


bucket4j:
    enabled: true
    filters:
      - cache-name: rate-limit-buckets-bot
        url: .*
        http-status-code: TOO_MANY_REQUESTS
        http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\" }"
        rate-limits:
          - cache-key: getRemoteAddr()
            bandwidths:
              - capacity: 100000
                time: 1
                unit: hours
retry:
  scrapper-retry:
    type: fixed
    max-attempt: 3
    delay: 10
    codes: [500, 501, 503]

springdoc:
  swagger-ui:
    path: /swagger-ui

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml
